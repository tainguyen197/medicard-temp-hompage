generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("EDITOR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Media     Media[]
}

model Category {
  id          String         @id @default(cuid())
  name        String         @unique
  slug        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Service {
  id                   String   @id @default(cuid())
  slug                 String   @unique
  title                String
  titleEn              String?
  description          String?
  descriptionEn        String?
  shortDescription     String?
  shortDescriptionEn   String?
  keywords             String?
  enKeywords           String?
  status               String   @default("DRAFT")
  featureImageId       String?  @unique
  featureImageEnId     String?  @unique
  metaTitle            String?
  metaTitleEn          String?
  metaDescription      String?
  metaDescriptionEn    String?
  metaKeywords         String?
  metaKeywordsEn       String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  featureImage         Media?   @relation("ServiceFeatureImage", fields: [featureImageId], references: [id])
  featureImageEn       Media?   @relation("ServiceFeatureImageEn", fields: [featureImageEnId], references: [id])
}

model Media {
  id              String      @id @default(cuid())
  url             String
  fileName        String?
  originalName    String?
  fileType        String?
  fileSize        Int?
  createdAt       DateTime    @default(now())
  uploadedById    String?
  uploadedBy      User?       @relation(fields: [uploadedById], references: [id])
  serviceImage    Service?    @relation("ServiceFeatureImage")
  serviceImageEn  Service?    @relation("ServiceFeatureImageEn")
  teamMemberImage TeamMember? @relation("TeamMemberImage")
  teamMemberImageEn TeamMember? @relation("TeamMemberImageEn")
  bannerImage     Banner?     @relation("BannerImage")
}

model TeamMember {
  id               String   @id @default(cuid())
  name             String
  nameEn           String?
  title            String
  titleEn          String?
  description      String
  descriptionEn    String?
  imageId          String?  @unique
  imageEnId        String?  @unique
  order            Int      @default(0)
  status           String   @default("ACTIVE") // "ACTIVE", "INACTIVE"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  image            Media?   @relation("TeamMemberImage", fields: [imageId], references: [id])
  imageEn          Media?   @relation("TeamMemberImageEn", fields: [imageEnId], references: [id])
}

model Banner {
  id        String   @id @default(cuid())
  type      String   @unique // "HOMEPAGE", "SERVICE", "NEWS" - only one per type
  link      String?
  imageId   String?  @unique
  status    String   @default("ACTIVE") // "ACTIVE", "INACTIVE"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Media?   @relation("BannerImage", fields: [imageId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  userId    String
  details   String?
  createdAt DateTime @default(now())
}

model Contact {
  id              String   @id @default(cuid())
  phone           String?
  address         String?
  addressEn       String?
  businessHours   String?
  businessHoursEn String?
  facebookUrl     String?
  zaloUrl         String?
  instagramUrl    String?
  status          String   @default("ACTIVE") // "ACTIVE", "INACTIVE"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
