// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Authentication & Authorization
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String // Hashed password
  role      String   @default("EDITOR") // "ADMIN" or "EDITOR"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  Media     Media[]
}

// Blog Post Management
model Post {
  id             String         @id @default(cuid())
  title          String
  slug           String         @unique
  content        String
  excerpt        String?
  featuredImage  String?        // URL or path to the featured image
  featured       Boolean        @default(false) // Whether this post is featured
  status         String         @default("DRAFT") // "DRAFT", "PUBLISHED", etc.
  publishedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  author         User           @relation(fields: [authorId], references: [id])
  authorId       String
  categories     PostCategory[] // Relation to PostCategory
  media          Media[]        // Relation to Media (images embedded in the post)
}

// Category Management
model Category {
  id          String         @id @default(cuid())
  name        String         @unique
  slug        String         @unique
  description String?
  posts       PostCategory[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Join table for Post and Category (Many-to-Many)
model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  assignedAt DateTime @default(now())

  @@id([postId, categoryId])
}

model Media {
  id           String   @id @default(cuid())
  url          String
  fileName     String?
  originalName String?
  fileType     String?
  fileSize     Int?
  createdAt    DateTime @default(now())
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  post         Post?    @relation(fields: [postId], references: [id])
  postId       String?
}

// Audit Log for tracking changes
model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE, etc.
  entity    String   // The entity being modified (Post, User, etc.)
  entityId  String   // ID of the entity being modified
  userId    String   // ID of the user making the change
  details   String?  // Additional details about the change
  createdAt DateTime @default(now())
}
